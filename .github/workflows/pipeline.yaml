
# This is a basic workflow to help started with Actions
name: Build Release

on:
    pull_request: # Only trigger the workflow if there is a pull request to the main branch
        branches: [ main ]

    workflow_dispatch: # Enables the possibility to trigger the workflow manually


jobs:
  # 1st Job -- Building the module
  build:
    runs-on: ubuntu-latest
    steps:
        # Checkout the main branch
      - uses: actions/checkout@v2
        
        # Setting up required powershell modules
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS, ps2exe
      
        # Setting up the powershell module cache
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
            path: ${{ steps.psmodulecache.outputs.modulepath }}
            key: ${{ steps.psmodulecache.outputs.keygen }}
        
        # Installing the required powershell module, if not cached
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
        
        # Running the InvokeBuild Module Invoke-Build command with "Release configuration"
      - name: Invoke Build
        shell: pwsh
        run: pwsh -command "Invoke-Build -File ./build.ps1 -Configuration 'Release'"
        
        
        # Pushing the changes from InvokeBuild to the main branch
      - name: Push changes to Git Repository
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -am "Pushing Artifacts"
          git push
        
        # Uploads the build powershell module as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./build/ # Saving the powershell module artifact to the path ./build/
  
  # 2nd Job -- Releasing the module
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
        # Check out the main branch
      - uses: actions/checkout@v2
      - uses: fregante/setup-git-user@v1
        
        # Downloads the powershell module build artifact made in the build step
      - name: Download build artifact
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          repo: ${{github.repository}}
          name: module-artifact # Name of the powershell module artifact
          path: Artifact/ # Downloads the module to the path ./Artifact/
        
        # Running a powershell command to save the module name as an Environment Variable
      - name: Get Module Name
        run: |
          Write-Host $Env:GITHUB_REF
          $ModuleName = (Get-ChildItem -Path ./Artifact/).Name
          echo "MODULE_NAME=$ModuleName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append          
        shell: pwsh
        
      #   # Publishing the module to powershell gallery
      # - name: Publish to Powershell Gallery
      #   # You may pin to the exact commit or the version.
      #   # uses: pcgeek86/publish-powershell-module-action@2a7837ce0746ea58c40574d8d6cbc6c44238edb7
      #   uses: pcgeek86/publish-powershell-module-action@v19
      #   with:
      #     modulePath: ./Artifact/${{ env.MODULE_NAME }} # Using the environment variable to find the module name
      #     NuGetApiKey: ${{ secrets.NUGETAPIKEY }} 